"""
Project Euler - Problem 11
http://projecteuler.net/problem=11

The sequence of triangle numbers is generated by adding the 
natural numbers. So the 7th triangle number would be 
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have 
over five divisors.

What is the value of the first triangle number to have 
over five hundred divisors?

Author: Daniel Couture
User: MathYourLife
Date: Sep 6, 2012
"""

from ProjectEuler.Problem import Solution
from ProjectEuler.Sequence import TriangleNumbers
from ProjectEuler import Arithmetic

class Problem012(Solution):
    """
    Extension of the ProjectEuler.Solution class that solves the problem:
    
    The sequence of triangle numbers is generated by adding the 
    natural numbers. So the 7th triangle number would be 
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have 
    over five divisors.

    What is the value of the first triangle number to have 
    over five hundred divisors?
    """
    
    def __init__(self):
        super(Problem012, self).__init__()
    
    def find_solution(self):
        """
        This method contains the guts of finding the solution.
        The timer starts just prior to calling this method
        and stops just after returning the solution's value.
        """
        
        tri_obj = TriangleNumbers()
        
        while True:
            value = tri_obj.next()
            factor_count = Arithmetic.factors(value, True)
            if factor_count > 500:
                break
        
        return value

def main():
    """
    Run this if called directly versus imported
    """
    prob = Problem012()
    
    prob.solve()
    
    print prob.problem_statement()
    print prob.results()

if __name__ == "__main__":
    main()

